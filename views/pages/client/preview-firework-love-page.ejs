<style>
    body {
        margin: 0;
        padding: 0;
        overflow: hidden;
        background: #000;
    }

    canvas {
        display: block;
    }
</style>

<div class="envelope">
    <div class="envelope-container">
        <div class="valentines">
            <div class="content"></div>
            <div class="front"></div>
            <div class="card">
                <div class="text">Mở Quà Nào Tình Yêu</div>
                <div class="heart js-button-heart"></div>
                <div class="hearts">
                    <div class="one"></div>
                    <div class="two"></div>
                    <div class="three"></div>
                    <div class="four"></div>
                    <div class="five"></div>
                </div>
            </div>
        </div>
        <div class="shadow"></div>
    </div>
</div>
</div>
<div class="preview-love-page" id="preview-firework-love-page" data-firework-text="<%= fireworkTexts %>"
    data-firework-images="<%= projectImages.join(' ') %>" data-page-preview>
    <canvas id="canvas"></canvas>
    <audio id="bgMusic" autoplay loop muted>
        <source src="https://res.cloudinary.com/de0ghhr8k/video/upload/v1749373498/uploads/hstlo7adlnkddneobkel.mp3"
            type="audio/mpeg">
        Trình duyệt của bạn không hỗ trợ audio.
    </audio>
</div>

<script>
    const previewLovePage = document.getElementById("preview-firework-love-page");
    if (previewLovePage) {
        const canvas = document.getElementById('canvas');
        const ctx = canvas.getContext('2d');
        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;

        window.addEventListener('resize', () => {
            canvas.width = window.innerWidth;
            canvas.height = window.innerHeight;
        });

        const fireworks = [];
        const particles = [];
        const texts = [];

        const fireworkText = previewLovePage.dataset.fireworkText;
        const fireworkImages = previewLovePage.dataset.fireworkImages.split(',');

        const chars = fireworkText;
        const images = fireworkImages;


        // Start Code
        let currentCharIndex = 0;

        function getSafeAreaX() {
            const safeWidth = canvas.width * 2 / 3;
            const margin = (canvas.width - safeWidth) / 2;
            return {
                min: margin,
                max: canvas.width - margin,
                center: canvas.width / 2
            };
        }

        function getSafeAreaY() {
            const safeHeight = canvas.height * 2 / 3;
            const margin = (canvas.height - safeHeight) / 2;
            return {
                min: margin,
                max: canvas.height - margin,
                center: canvas.height / 2
            };
        }

        function constrainToSafeArea(x, y) {
            const safeX = getSafeAreaX();
            const safeY = getSafeAreaY();

            return {
                x: Math.min(Math.max(x, safeX.min), safeX.max),
                y: Math.min(Math.max(y, safeY.min), safeY.max)
            };
        }

        class Firework {
            constructor(x, y, targetX, targetY, char = null) {
                // Ràng buộc cả điểm bắt đầu và điểm đích vào vùng an toàn
                const safeStart = constrainToSafeArea(x, y);
                const safeTarget = constrainToSafeArea(targetX, targetY);

                this.x = safeStart.x;
                this.y = safeStart.y;
                this.startX = safeStart.x;
                this.startY = safeStart.y;

                this.targetX = safeTarget.x;
                this.targetY = safeTarget.y;

                this.char = char;

                this.trail = [];
                for (let i = 0; i < 5; i++) {
                    this.trail.push([this.x, this.y]);
                }

                this.hue = Math.floor(Math.random() * 360);
                this.brightness = 60 + Math.floor(Math.random() * 40);

                this.velocity = {
                    x: (this.targetX - this.x) * 0.024,
                    y: (this.targetY - this.y) * 0.024
                };
                this.gravity = 0.02;
                this.resistance = 0.95;
                this.exploded = false;
            }

            update() {
                this.trail.pop();
                this.trail.unshift([this.x, this.y]);

                this.x += this.velocity.x;
                this.y += this.velocity.y;
                this.velocity.y += this.gravity;

                const distanceToTarget =
                    Math.sqrt(Math.pow(this.targetX - this.x, 2) + Math.pow(this.targetY - this.y, 2));

                if (!this.exploded && (distanceToTarget < 15 || this.velocity.y > 0)) {
                    this.explode();
                    this.exploded = true;
                    return false;
                }

                return true;
            }

            draw() {
                ctx.strokeStyle = `hsl(${this.hue}, 100%, ${this.brightness}%)`;
                ctx.lineWidth = 3;
                ctx.beginPath();
                ctx.moveTo(this.trail[0][0], this.trail[0][1]);
                for (let i = 1; i < this.trail.length; i++) {
                    ctx.lineTo(this.trail[i][0], this.trail[i][1]);
                }
                ctx.stroke();
            }

            explode() {
                const particleCount = 80 + Math.floor(Math.random() * 40);
                for (let i = 0; i < particleCount; i++) {
                    particles.push(new Particle(this.x, this.y, this.hue));
                }

                if (this.char) {
                    if (this.char.endsWith('.png') || this.char.endsWith('.jpg') || this.char.endsWith('.webp')) {
                        texts.push(new ImageDisplay(this.x, this.y, this.char, this.hue));
                    } else {
                        texts.push(new Text(this.x, this.y, this.char, this.hue));
                    }
                }
            }
        }


        class Particle {
            constructor(x, y, hue) {
                this.x = x;
                this.y = y;
                this.hue = hue + Math.random() * 30 - 15;
                this.brightness = 50 + Math.random() * 50;
                this.size = 1 + Math.random() * 3;
                this.alpha = 1;

                const angle = Math.random() * Math.PI * 2;
                const speed = 0.5 + Math.random() * 4;
                this.velocity = {
                    x: Math.cos(angle) * speed,
                    y: Math.sin(angle) * speed
                };
                this.gravity = 0.05;
                this.resistance = 0.96;
                this.decay = 0.01 + Math.random() * 0.02;

                this.trail = [];
                for (let i = 0; i < 5; i++) {
                    this.trail.push([this.x, this.y]);
                }
            }

            update(index) {
                this.trail.pop();
                this.trail.unshift([this.x, this.y]);

                this.velocity.x *= this.resistance;
                this.velocity.y *= this.resistance;

                this.velocity.y += this.gravity;

                this.x += this.velocity.x;
                this.y += this.velocity.y;

                this.alpha -= this.decay;

                if (this.alpha <= 0) {
                    particles.splice(index, 1);
                    return false;
                }

                return true;
            }

            draw() {
                ctx.fillStyle = `hsla(${this.hue}, 100%, ${this.brightness}%, ${this.alpha})`;

                ctx.beginPath();
                ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
                ctx.fill();

                if (this.alpha > 0.3) {
                    ctx.strokeStyle = `hsla(${this.hue}, 100%, ${this.brightness}%, ${this.alpha * 0.5})`;
                    ctx.lineWidth = this.size * 0.5;
                    ctx.beginPath();
                    ctx.moveTo(this.trail[0][0], this.trail[0][1]);
                    for (let i = 1; i < this.trail.length; i++) {
                        ctx.lineTo(this.trail[i][0], this.trail[i][1]);
                    }
                    ctx.stroke();
                }
            }
        }

        class Text {
            constructor(x, y, text, hue) {
                this.x = x;
                this.y = y;
                this.text = text;
                this.hue = hue;
                this.size = Math.min(canvas.width, canvas.height) * 0.12;
                this.alpha = 0;
                this.life = 0;
                this.decay = 0.007;
            }

            update() {
                this.life++;

                if (this.life < 30) {
                    this.alpha = Math.min(this.life / 30, 1);
                }
                else if (this.life < 120) {
                }
                else {
                    this.alpha -= this.decay;
                }

                if (this.alpha <= 0) {
                    return false;
                }
                return true;
            }

            draw() {
                ctx.font = `bold ${this.size}px Arial, sans-serif`;
                ctx.textAlign = 'center';
                ctx.textBaseline = 'middle';

                ctx.shadowColor = `hsla(${this.hue}, 100%, 70%, ${this.alpha * 0.5})`;
                ctx.shadowBlur = 15;

                ctx.fillStyle = `hsla(${this.hue}, 100%, 70%, ${this.alpha})`;
                ctx.fillText(this.text, this.x, this.y);

                ctx.lineWidth = 2;
                ctx.strokeStyle = `hsla(${this.hue + 30}, 100%, 90%, ${this.alpha})`;
                ctx.strokeText(this.text, this.x, this.y);

                ctx.shadowBlur = 0;
            }
        }

        class ImageDisplay {
            constructor(x, y, src, hue = 0) {
                this.x = x;
                this.y = y;
                this.img = new Image();
                this.img.src = src;
                this.alpha = 0;
                this.size = Math.min(canvas.width, canvas.height) * 0.15;
                this.life = 0;
                this.decay = 0.007;
            }

            update() {
                this.life++;

                if (this.life < 30) {
                    this.alpha = Math.min(this.life / 30, 0.6); // fade in max alpha = 0.6
                } else if (this.life < 120) {
                    // giữ nguyên alpha
                } else {
                    this.alpha -= this.decay; // fade out
                }

                return this.alpha > 0;
            }

            draw() {
                if (!this.img.complete) return;

                const half = this.size / 2;

                ctx.save();

                // Làm mờ ảnh bằng filter + alpha
                ctx.globalAlpha = this.alpha;
                ctx.shadowColor = `rgba(255, 255, 255, ${this.alpha * 0.4})`;
                ctx.shadowBlur = 20;

                // OPTIONAL: nếu muốn blur mạnh hơn nữa
                // ctx.filter = 'blur(1.5px)';

                ctx.drawImage(this.img, this.x - half, this.y - half, this.size, this.size);

                ctx.restore();
            }
        }


        function launchRandomFirework() {
            const padding = 50;

            // Tạo vùng an toàn trong canvas (tránh sát mép)
            const safeX = {
                min: padding,
                max: canvas.width - padding
            };

            const safeY = {
                min: padding,
                max: canvas.height / 2 // bay lên nửa trên canvas
            };

            const startX = canvas.width / 2; // trung tâm đáy
            const startY = canvas.height;

            const targetX = safeX.min + Math.random() * (safeX.max - safeX.min);
            const targetY = safeY.min + Math.random() * (safeY.max - safeY.min);

            fireworks.push(new Firework(startX, startY, targetX, targetY));
        }


        function launchTextFirework() {
            const char = chars[currentCharIndex];
            currentCharIndex = (currentCharIndex + 1) % chars.length;

            const safeX = getSafeAreaX();
            const safeY = getSafeAreaY();

            const startX = safeX.min + Math.random() * (safeX.max - safeX.min);
            const startY = safeY.max;

            const targetX = safeX.min + Math.random() * (safeX.max - safeX.min);
            const targetY = safeY.min + Math.random() * (safeY.max - safeY.min);

            fireworks.push(new Firework(
                startX,
                startY,
                targetX,
                targetY,
                char
            ));
        }

        function launchTextSequence() {
            if (chars.length === 0) return;

            const safeX = getSafeAreaX();
            const safeY = getSafeAreaY();

            const availableWidth = safeX.max - safeX.min;
            const safeSpace = availableWidth * 0.7 / chars.length;
            const startPosX = safeX.center - ((chars.length - 1) * safeSpace / 2);

            for (let i = 0; i < chars.length; i++) {
                setTimeout(() => {
                    // Đặt launchX cố định theo vị trí target để mỗi lần gọi đều giống nhau
                    const launchX = startPosX + i * safeSpace;
                    const launchY = safeY.max;

                    const targetX = startPosX + i * safeSpace;
                    const targetY = safeY.center;

                    fireworks.push(new Firework(
                        launchX,
                        launchY,
                        targetX,
                        targetY,
                        chars[i]
                    ));
                }, i * 600);
            }
        }



        function launchImageFirework() {
            // Random ảnh
            const src = images[Math.floor(Math.random() * images.length)];

            const safeX = getSafeAreaX();
            const safeY = getSafeAreaY();

            const startX = safeX.min + Math.random() * (safeX.max - safeX.min);
            const startY = safeY.max;

            const targetX = safeX.min + Math.random() * (safeX.max - safeX.min);
            const targetY = safeY.min + Math.random() * (safeY.max - safeY.min);

            fireworks.push(new Firework(
                startX,
                startY,
                targetX,
                targetY,
                src // dùng src thay vì char
            ));
        }

        let animationId;
        let intervals = []; // Lưu id interval

        function startIntervals() {
            intervals.push(setInterval(launchRandomFirework, 1000));
            // intervals.push(setInterval(launchTextFirework, 1000)); // nếu dùng thì bật lên
            intervals.push(setInterval(launchImageFirework, 2000));
            intervals.push(setInterval(launchTextSequence, 1000));
        }

        function clearIntervals() {
            intervals.forEach(id => clearInterval(id));
            intervals = [];
        }

        function animate() {
            animationId = requestAnimationFrame(animate);

            ctx.fillStyle = 'rgba(0, 0, 0, 0.09)';
            ctx.fillRect(0, 0, canvas.width, canvas.height);

            for (let i = fireworks.length - 1; i >= 0; i--) {
                if (fireworks[i].update()) {
                    fireworks[i].draw();
                } else {
                    fireworks.splice(i, 1);
                }
            }

            for (let i = particles.length - 1; i >= 0; i--) {
                if (particles[i].update(i)) {
                    particles[i].draw();
                }
            }

            for (let i = texts.length - 1; i >= 0; i--) {
                if (texts[i].update()) {
                    texts[i].draw();
                } else {
                    texts.splice(i, 1);
                }
            }
        }

        document.addEventListener('visibilitychange', () => {
            if (document.hidden) {
                // Tab bị ẩn, dừng animation + interval + xóa data để tránh lag
                cancelAnimationFrame(animationId);
                clearIntervals();

                fireworks = [];
                particles = [];
                texts = [];
            } else {
                // Tab bật lại, chạy lại animation và interval
                animate();
                startIntervals();
            }
        });

        // Khởi động ban đầu

        document.querySelector('.js-button-heart').addEventListener('click', function () {
            document.querySelector('.envelope').style.display = 'none';
            animate();
            startIntervals();
        });
    }
</script>